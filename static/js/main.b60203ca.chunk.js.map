{"version":3,"sources":["App.js","index.js"],"names":["state","proxy","current","items","laces","mesh","caps","inner","sole","stripes","band","patch","Shoe","ref","useRef","snap","useProxy","useGLTF","nodes","materials","useFrame","t","clock","getElapsedTime","rotation","z","Math","sin","x","cos","y","position","useState","hovered","set","useEffect","cursor","document","body","style","btoa","dispose","onPointerOver","e","stopPropagation","object","material","name","onPointerOut","intersections","length","onPointerMissed","onPointerDown","geometry","shoe","shoe_1","shoe_2","shoe_3","shoe_4","shoe_5","shoe_6","shoe_7","Picker","display","className","color","onChange","App","concurrent","pixelRatio","camera","intensity","angle","penumbra","fallback","Environment","files","ContactShadows","PI","opacity","width","height","blur","far","OrbitControls","minPolarAngle","maxPolarAngle","enableZoom","enablePan","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b60203ca.chunk.js","sourcesContent":["import React, { Suspense, useRef, useState, useEffect } from \"react\"\r\nimport { Canvas, useFrame } from \"react-three-fiber\"\r\nimport { ContactShadows, Environment, useGLTF, OrbitControls } from \"drei\"\r\nimport { HexColorPicker } from \"react-colorful\"\r\nimport { proxy, useProxy } from \"valtio\"\r\n\r\n// Using a Valtio state model to bridge reactivity between\r\n// the canvas and the dom, both can write to it and/or react to it.\r\nconst state = proxy({\r\n  current: null,\r\n  items: {\r\n    laces: \"#ffffff\",\r\n    mesh: \"#ffffff\",\r\n    caps: \"#ffffff\",\r\n    inner: \"#ffffff\",\r\n    sole: \"#ffffff\",\r\n    stripes: \"#ffffff\",\r\n    band: \"#ffffff\",\r\n    patch: \"#ffffff\",\r\n  },\r\n})\r\n\r\nfunction Shoe() {\r\n  const ref = useRef()\r\n  const snap = useProxy(state)\r\n  // Drei's useGLTF hook sets up draco automatically, that's how it differs from useLoader(GLTFLoader, url)\r\n  // { nodes, materials } are extras that come from useLoader, these do not exist in threejs/GLTFLoader\r\n  // nodes is a named collection of meshes, materials a named collection of materials\r\n  const { nodes, materials } = useGLTF(\"shoe-draco.glb\")\r\n\r\n  // Animate model\r\n  useFrame((state) => {\r\n    const t = state.clock.getElapsedTime()\r\n    ref.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20\r\n    ref.current.rotation.x = Math.cos(t / 4) / 8\r\n    ref.current.rotation.y = Math.sin(t / 4) / 8\r\n    ref.current.position.y = (1 + Math.sin(t / 1.5)) / 10\r\n  })\r\n\r\n  // Cursor showing current color\r\n  const [hovered, set] = useState(null)\r\n  useEffect(() => {\r\n    const cursor = `<svg width=\"64\" height=\"64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0)\"><path fill=\"rgba(255, 255, 255, 0.5)\" d=\"M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z\" stroke=\"#000\"/><g filter=\"url(#filter0_d)\"><path d=\"M29.5 47C39.165 47 47 39.165 47 29.5S39.165 12 29.5 12 12 19.835 12 29.5 19.835 47 29.5 47z\" fill=\"${snap.items[hovered]}\"/></g><path d=\"M2 2l11 2.947L4.947 13 2 2z\" fill=\"#000\"/><text fill=\"#000\" style=\"white-space:pre\" font-family=\"Inter var, sans-serif\" font-size=\"10\" letter-spacing=\"-.01em\"><tspan x=\"35\" y=\"63\">${hovered}</tspan></text></g><defs><clipPath id=\"clip0\"><path fill=\"#fff\" d=\"M0 0h64v64H0z\"/></clipPath><filter id=\"filter0_d\" x=\"6\" y=\"8\" width=\"47\" height=\"47\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\"><feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"/><feColorMatrix in=\"SourceAlpha\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"/><feOffset dy=\"2\"/><feGaussianBlur stdDeviation=\"3\"/><feColorMatrix values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\"/><feBlend in2=\"BackgroundImageFix\" result=\"effect1_dropShadow\"/><feBlend in=\"SourceGraphic\" in2=\"effect1_dropShadow\" result=\"shape\"/></filter></defs></svg>`\r\n    const auto = `<svg width=\"64\" height=\"64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"rgba(255, 255, 255, 0.5)\" d=\"M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z\" stroke=\"#000\"/><path d=\"M2 2l11 2.947L4.947 13 2 2z\" fill=\"#000\"/></svg>`\r\n    document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(hovered ? cursor : auto)}'), auto`\r\n  }, [hovered])\r\n\r\n  // Using the GLTFJSX output here to wire in app-state and hook up events\r\n  return (\r\n    <group\r\n      ref={ref}\r\n      dispose={null}\r\n      onPointerOver={(e) => (e.stopPropagation(), set(e.object.material.name))}\r\n      onPointerOut={(e) => e.intersections.length === 0 && set(null)}\r\n      onPointerMissed={() => (state.current = null)}\r\n      onPointerDown={(e) => (e.stopPropagation(), (state.current = e.object.material.name))}>\r\n      <mesh geometry={nodes.shoe.geometry} material={materials.laces} material-color={snap.items.laces} />\r\n      <mesh geometry={nodes.shoe_1.geometry} material={materials.mesh} material-color={snap.items.mesh} />\r\n      <mesh geometry={nodes.shoe_2.geometry} material={materials.caps} material-color={snap.items.caps} />\r\n      <mesh geometry={nodes.shoe_3.geometry} material={materials.inner} material-color={snap.items.inner} />\r\n      <mesh geometry={nodes.shoe_4.geometry} material={materials.sole} material-color={snap.items.sole} />\r\n      <mesh geometry={nodes.shoe_5.geometry} material={materials.stripes} material-color={snap.items.stripes} />\r\n      <mesh geometry={nodes.shoe_6.geometry} material={materials.band} material-color={snap.items.band} />\r\n      <mesh geometry={nodes.shoe_7.geometry} material={materials.patch} material-color={snap.items.patch} />\r\n    </group>\r\n  )\r\n}\r\n\r\nfunction Picker() {\r\n  const snap = useProxy(state)\r\n  return (\r\n    <div style={{ display: snap.current ? \"block\" : \"none\" }}>\r\n      <HexColorPicker className=\"picker\" color={snap.items[snap.current]} onChange={(color) => (state.items[snap.current] = color)} />\r\n      <h1>{snap.current}</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <Canvas concurrent pixelRatio={[1, 1.5]} camera={{ position: [0, 0, 2.75] }}>\r\n        <ambientLight intensity={0.3} />\r\n        <spotLight intensity={0.3} angle={0.1} penumbra={1} position={[5, 25, 20]} />\r\n        <Suspense fallback={null}>\r\n          <Shoe />\r\n          <Environment files=\"royal_esplanade_1k.hdr\" />\r\n          <ContactShadows rotation-x={Math.PI / 2} position={[0, -0.8, 0]} opacity={0.25} width={10} height={10} blur={2} far={1} />\r\n        </Suspense>\r\n        <OrbitControls minPolarAngle={Math.PI / 2} maxPolarAngle={Math.PI / 2} enableZoom={false} enablePan={false} />\r\n      </Canvas>\r\n      <Picker />\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./styles.css\"\r\nimport \"react-colorful/dist/index.css\"\r\nimport App from \"./App\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n"],"sourceRoot":""}